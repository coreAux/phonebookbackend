{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Notification.js","services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","searchName","handleSearchName","value","onChange","placeholder","PersonForm","handleSubmit","newName","handleNameChange","newPhonenumber","handlePhonenumberChange","onSubmit","type","Person","showPersons","deletePerson","map","person","name","number","onClick","id","Notification","message","className","baseUrl","personService","getAll","axios","get","then","r","data","create","newObject","post","update","put","delete","App","useState","persons","setPersons","setNewName","setNewSearchName","setNewPhonenumber","notification","setNotification","activateNotification","timeout","setTimeout","useEffect","initialPersons","filter","obj","toLowerCase","includes","e","target","preventDefault","returnedPerson","concat","addPerson","window","confirm","returnedData","p","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50260fb0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Filter = ({ searchName, handleSearchName }) => {\n  return (\n    <div>\n      Filter shown with:{\" \"}\n      <input\n        value={searchName}\n        onChange={handleSearchName}\n        placeholder=\"E.g. Donald, Goofy...\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst PersonForm = ({\n  handleSubmit,\n  newName,\n  handleNameChange,\n  newPhonenumber,\n  handlePhonenumberChange,\n}) => {\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          Name:{\" \"}\n          <input\n            value={newName}\n            onChange={handleNameChange}\n            placeholder=\"Name\"\n          />\n        </div>\n        <div>\n          Number:{\" \"}\n          <input\n            value={newPhonenumber}\n            onChange={handlePhonenumberChange}\n            placeholder=\"Tel. number\"\n          />\n        </div>\n        <div>\n          <button type=\"submit\">Add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Person = ({ showPersons, deletePerson }) => {\n  return (\n    <div>\n      {showPersons.map((person) => (\n        <p key={person.name}>\n          {person.name}: {person.number}\n          <button onClick={() => deletePerson(person.id, person.name)}>\n            Delete\n          </button>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Person;\n","import React from \"react\";\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className={`${type}`}>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default Notification;\n","import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((r) => r.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((r) => r.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((r) => r.data);\n};\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((r) => r.data);\n};\n\nconst personService = {\n  getAll,\n  create,\n  update,\n  deletePerson,\n};\n\nexport default personService;\n","// Mark : - Imports\n// Libraries\nimport { useState, useEffect } from \"react\";\n\n// CSS\nimport \"./App.css\";\n\n// Components\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Person from \"./components/Person\";\nimport Notification from \"./components/Notification\";\n\n// Services\nimport personService from \"./services/persons.js\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [searchName, setNewSearchName] = useState(\"\");\n  const [newPhonenumber, setNewPhonenumber] = useState(\"\");\n  const [notification, setNotification] = useState(null);\n\n  // Function for activating a Notification\n  const activateNotification = (message, type, timeout) => {\n    setNotification({ message, type });\n    setTimeout(() => {\n      setNotification(null);\n    }, timeout);\n  };\n\n  // CRUD functions\n  // Create, invoked by the handelSubmit function\n  const addPerson = () => {\n    const person = {\n      name: newName,\n      number: newPhonenumber,\n    };\n\n    personService.create(person).then((returnedPerson) => {\n      setPersons(persons.concat(returnedPerson));\n      setNewName(\"\");\n      setNewPhonenumber(\"\");\n      activateNotification(\n        `Added ${person.name} to the Phonebook.`,\n        \"success\",\n        10000\n      );\n    });\n  };\n\n  // Read\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  // Update\n  const updatePerson = () => {\n    const person = persons.find((p) => p.name === newName);\n    const id = person.id;\n    const changedPerson = { ...person, number: newPhonenumber };\n\n    personService\n      .update(id, changedPerson)\n      .then((returnedPerson) => {\n        setPersons(persons.map((p) => (p.id !== id ? p : returnedPerson)));\n      })\n      .catch((err) => {\n        activateNotification(\n          `Information of ${person.name} has already been removed from the server.`,\n          \"error\",\n          10000\n        );\n        setPersons(persons.filter((p) => p.id !== id));\n      });\n  };\n\n  // Delete person\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n        .deletePerson(id)\n        .then((returnedData) => {\n          activateNotification(`Deleted ${name}`, \"info\", 10000);\n          setPersons(persons.filter((p) => p.id !== id));\n        })\n        .catch((err) => {\n          activateNotification(\n            `${name} has already been deleted from the server!`,\n            \"error\",\n            10000\n          );\n        });\n    }\n  };\n\n  // Handlers\n  // Syncs the input with the components state\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n  const handlePhonenumberChange = (e) => {\n    setNewPhonenumber(e.target.value);\n  };\n  const handleSearchName = (e) => {\n    setNewSearchName(e.target.value);\n  };\n\n  // Function for when form is submitted\n  const handleSubmit = (e, person) => {\n    e.preventDefault();\n\n    // Filter through array to see if newName already exists in there\n    // If it does, the filter-function will return an array that is not empty\n    // if (persons.filter((e) => e.name === newName).length > 0) {\n    // If the returned array is not empty we warn the user that the name already exists\n    //   if (\n    //     window.confirm(\n    //       `${newName} is already added to the phonebook, replace the old number with a new one?`\n    //     )\n    //   ) {\n    //     updatePerson();\n    //   }\n    // } else {\n    // If the returned array is empty we can safely add the person to the phonebook\n    addPerson();\n    // }\n  };\n\n  // Store our persons-array for future filtering use\n  const showPersons = persons.filter((obj) =>\n    obj.name.toLowerCase().includes(searchName.toLowerCase())\n  );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification {...notification} />\n      <div>\n        <Filter searchName={searchName} handleSearchName={handleSearchName} />\n      </div>\n      <div>\n        <h2>Add new</h2>\n        <PersonForm\n          handleSubmit={handleSubmit}\n          newName={newName}\n          handleNameChange={handleNameChange}\n          newPhonenumber={newPhonenumber}\n          handlePhonenumberChange={handlePhonenumberChange}\n        />\n      </div>\n      <h2>Numbers</h2>\n      <Person showPersons={showPersons} deletePerson={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}